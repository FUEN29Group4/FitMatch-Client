@{
    ViewData["Title"] = "TrainerResume";
}
<script src="https://unpkg.com/vue@3"></script>

<!-- 周曆 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>

<link href="~/css/TrainerResume.css" rel="stylesheet">


<!-- Page Header Start -->
<div class="container-fluid page-header py-5  wow fadeIn" data-wow-delay="0.1s">
    <div class="container text-center py-5">
        <h1 class="display-3 text-white text-uppercase mb-3 animated slideInDown">TRAINER RESUME</h1>
        <nav aria-label="breadcrumb animated slideInDown">
            <ol class="breadcrumb justify-content-center text-uppercase mb-0">
                <li class="breadcrumb-item"><a class="text-white" href="#">Home</a></li>
                <li class="breadcrumb-item"><a class="text-white" href="#">Pages</a></li>
                <li class="breadcrumb-item text-primary active" aria-current="page">TRAINER RESUME</li>
            </ol>
        </nav>
    </div>
</div>
<!-- Page Header End -->
<!-- Team Start -->
<section class="section bg-gray">

    <div class="trainerfilter bgc">
        <div class="container ">
            <div class="row">
                <div class="card border-0 bg-transparent rounded-0 mb-4" style="width: 100%;">

                    <!-- 履歷內容開始 -->
                    <div class="row no-gutters">

                        <!-- 教練大頭貼 -->
                        <div class="col-md-6 pt-5">
                            <div class="circle-container mx-auto">
                                <img src="~/images/nopersonal.jpg" class="trainer-img" id="trainer-img">
                            </div>
                            <!-- 教練名字 -->
                            <h3 class="card-title text-light" id="trainer-name"></h3>
                            <div class="d-flex align-items-center">

                                <!-- 評分 -->
                                @*<p class="card-subtitle pb-1 pt-4 mb-2 letter-spacing m-auto">
                                    <img class="star" src="~/images/icon/star.png" alt="">
                                    <img class="star" src="~/images/icon/star.png" alt="">
                                    <img class="star" src="~/images/icon/star.png" alt="">
                                    <img class="star" src="~/images/icon/star.png" alt="">
                                    <img class="star" src="~/images/icon/star_dark.png" alt="">
                                </p>*@
                            </div>

                            <!-- 社群 -->
                            <div class="d-flex align-items-center mb-2 pt-4">
                                <p class="card-subtitle letter-spacing m-auto">
                                    <i class="fa-brands fa-square-facebook fa-xl me-2 fc-232323"></i>
                                    <i class="fa-brands fa-linkedin fa-xl me-2 fc-232323"></i>
                                    <i class="fa-brands fa-square-instagram fa-xl fc-232323"></i>
                                    <i class="fa-regular fa-heart fa-xl ms-3" style="color: #f24b88;"></i>
                                </p>
                            </div>
                            <!-- 課程費用 -->
                            <div class="d-flex align-items-center">
                                <p class="coursefee card-subtitle letter-spacing m-auto text-light pt-1 font-weight-bold"
                                   id="coursefee">
                                    課程費用: /hr
                                </p>
                                </p>
                            </div>

                        </div>


                        <div class="col-md-5">
                            <div class="card-body team-wrap pl-5 text-light pt-5">

                                <!-- 專長 -->
                                <div>
                                    <h5 class="d-flex fc-232323">Expertise專長</h5>
                                    <ul id="expertise">
                                    </ul>
                                </div>
                                <hr>
                                <!-- 專業證照 -->
                                <div>
                                    <h5 class="d-flex fc-232323">Certificate專業證照</h5>
                                    <ul id="certificates">
                                    </ul>
                                </div>
                                <hr>
                                <!-- 經歷 -->
                                <div>
                                    <h5 class="d-flex fc-232323">Experience經歷</h5>
                                    <ul id="experience">
                                    </ul>
                                </div>

                            </div>
                        </div>

                    </div>
                    <!-- 教練履歷內容結束 -->
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Section Team End -->
<!-- 我要預約的按鈕開始 -->
<div id="app">
    <div class="btn-1-container" id="gogo">
        <button class="btn btn-1" id="showButton" @@click="toggleCalendar">
            <span class="btn-content">我要預約</span>
            <span class="icon"><i class="fa fa-arrow-right" aria-hidden="true"></i></span>
        </button>
    </div>
    <!-- 我要預約的按鈕結束 -->
    <div class="container mt-5">
        <div class="reservation" id="calendar" v-show="showCalendar">
        </div>
    </div>
</div>
<!-- 預約日期顯示結束 -->
<!-- Section Team End -->
<!-- 教練履歷 -->
<!-- 引入Composition API -->

<script>
    const ApiUrl = document.querySelector('meta[name="api-base-url"]').getAttribute('content');

    document.addEventListener("DOMContentLoaded", function () {
        // 從URL獲取的Trainer的ID
        var urlParams = new URLSearchParams(window.location.search);
        var trainerId = urlParams.get("id");

        // 使用fetch函數獲取特定Trainer的API數據
        fetch(`${ApiUrl}/api/Reservation/` + trainerId)
            .then(function (response) {
                if (!response.ok) {
                    throw new Error("API請求失敗" + response);
                }
                return response.json();
            })
            .then(function (data) {
                // console.log(data);
                // 純粹查教練履歷
                var Photo = data.photo; //照片
                var trainerName = data.trainerName; //教練名字
                var courseFee = data.courseFee; //課程費用
                var expertise = data.expertise; //經歷
                var certificates = data.certificate; //專業證照
                var experience = data.experience; //專長

                // 更新教練照片
                var trainerPhotoElement = document.querySelector("#trainer-img");

                //trainerPhotoElement.onerror = function () {
                //    trainerPhotoElement.src = "./images/nopersonal.jpg";
                //};
                if (Photo) {
                    var trainerImageBase64 = Photo; // 從API獲取的Base64編碼的照片
                trainerPhotoElement.src = "data:image/jpeg;base64," + trainerImageBase64; // 直接將圖像設置為src
                }

                // 更新教練名字
                var trainerNameElement = document.querySelector("#trainer-name");
                trainerNameElement.textContent = trainerName;
                // 课程费用
                var courseFeeElement = document.querySelector("#coursefee");
                courseFeeElement.textContent = "課程費用: " + courseFee + "/hr";

                // 更新專長
                var expertiseElement = document.querySelector("#expertise");
                var expertiseArray = expertise.split(",");
                expertiseArray.forEach(function (field) {
                    var listItem = document.createElement("li");
                    listItem.textContent = field.trim(); // 去除字符串两侧的空格
                    expertiseElement.appendChild(listItem);
                });

                // 更新專業證照
                var certificatesElement = document.querySelector("#certificates");
                var certificatesArray = certificates.split(",");
                certificatesArray.forEach(function (field) {
                    var listItem = document.createElement("li");
                    listItem.textContent = field.trim(); // 去除字符串两侧的空格
                    certificatesElement.appendChild(listItem);
                });

                // 更新經歷
                var experienceElement = document.querySelector("#experience");
                var experienceArray = experience.split(",");
                experienceArray.forEach(function (field) {
                    var listItem = document.createElement("li");
                    listItem.textContent = field.trim(); // 去除字符串两侧的空格
                    experienceElement.appendChild(listItem);
                });


                //以下開始製作預約月曆

            })
            .catch(function (error) {
                // 處裡錯誤訊息
                console.error("API请求失败: " + error.message);
            });

    });

    //  預約周曆
    //讀取session中存的memberId
    const memberIdFromSession = sessionStorage.getItem('memberId');

    //const { createApp, ref } = Vue;
    const { ref } = Vue;
    const app = Vue.createApp({
        setup() {
            const showCalendar = ref(false);
            let calendarInstance = null;
            let globalData = null;
            let isDataFetched = false;
            const toggleCalendar = () => {
                showCalendar.value = !showCalendar.value;
                if (showCalendar.value && !isDataFetched) {
                    fetchEventsFromAPI().then(() => { // 從API獲取數據
                        isDataFetched = true; // 獲取數據後將變數設置為 true
                        calendarInstance.render();
                    });
                }
                // 添加滾動到視圖的代碼
                const gogoBlock = document.getElementById("gogo");
                gogoBlock.scrollIntoView({ behavior: "smooth", block: showCalendar.value ? "start" : "end" });
            };

            const initCalendar = () => {
                const calendarEl = document.getElementById('calendar');
                calendarInstance = new FullCalendar.Calendar(calendarEl, {
                    // 設定初始視圖為週視圖
                    initialView: 'timeGridWeek',
                    selectable: true,
                    allDaySlot: false,
                    // 設定語言
                    locale: 'zh-tw',
                    // 設定時間範圍，早上9點到晚上10點
                    slotMinTime: '09:00:00',
                    slotMaxTime: '22:00:00',
                    slotDuration: '01:00:00',  // 這裡設定每個時間格為一小時
                    height: 760,
                    titleFormat: { year: 'numeric' },  // 只顯示年分
                    // 顯示上一週、下一週和今天按鈕
                    headerToolbar: {
                        left: 'prev',
                        center: 'title',
                        right: 'next today'
                    },
                    eventContent: function (arg) {
                        let memberId = arg.event.extendedProps.memberId;
                        let courseStatus = arg.event.extendedProps.courseStatus;

                        if (courseStatus === '進行中' && memberId === 0) {
                            return {
                                html: '<button class="available">尚可預約</button>'
                            };
                        } else if (courseStatus === '進行中' && memberId > 0) {
                            return {
                                html: '<button class="booked">已被預約</button>'
                            };
                        } else {
                            return {
                                html: '<button class="booked">已結束</button>'
                            };
                        }

                    },
                    eventClick: function (info) {
                        if (!memberIdFromSession) {
                            Swal.fire('提示', '尚未登入，無法進行預約', 'info');
                            return;
                        }
                        let memberId = info.event.extendedProps.memberId;
                        let courseStatus = info.event.extendedProps.courseStatus;
                        if (!memberId && courseStatus === '進行中') {
                            showModal(info.event);
                        }
                    }

                });
                //calendarInstance.render();
            };

            const fetchEventsFromAPI = async () => {
                // 從URL獲取的Trainer的ID
                var urlParams = new URLSearchParams(window.location.search);
                var trainerId = urlParams.get("id");
                
                fetch(`${ApiUrl}/api/Reservation/` + trainerId)
                    .then(function (response) {
                        if (!response.ok) {
                            throw new Error("API請求失敗" + response);
                        }
                        return response.json();
                    })
                    .then(function (data) {
                        globalData = data; // 儲存數據到全局變量
                        // 將獲取的事件數據添加到日曆中
                        calendarInstance.addEventSource(data.classes.map(event => ({
                            start: event.startTime,
                            end: event.endTime,
                            extendedProps: {
                                memberId: event.memberId,
                                classId: event.classId,
                                gymId: event.gymId,
                                classTypeId: event.classTypeId,
                                courseStatus: event.courseStatus,
                            }
                        })));

                    })
                    .catch(function (error) {
                        // 處理錯誤情況
                        console.log("找不到預約資料: " + error.message);
                        Swal.fire('錯誤', '此教練尚未開課', 'error');

                    });
            };

            const showModal = (event) => {
                //接收場館
                // 使用fetch、axios或其他HTTP庫從API獲取健身房信息
                var gymId = event.extendedProps.gymId;
                var startTime = event.extendedProps.startTime;
                var endTime = event.extendedProps.endTime;

                // 從獲取到的API數據中找出對應的健身房
                var gymInfo = globalData.gyms.find(gym => gym.gymId === gymId);
                // 獲取教練ID和課程類型ID
                const classTypeId = event.extendedProps.classTypeId;
                //const matchedClassTypeInfo = classTypeData.find(type => type.classTypeId === classTypeId);
                // 放進健身房模擬視窗
                // 使用SweetAlert2显示模态窗口
                Swal.fire({
                    title: '預約資訊',
                    html: `
                                                <div class="row m-0 p-0">
                                                    <div class="col me-0 pe-0" style="text-align: left;">
                                                      <p><strong>場館名稱:</strong><br> ${gymInfo ? gymInfo.gymName : "場館名稱未知"}</p>
                                                      <p><strong>場館電話:</strong><br> ${gymInfo ? gymInfo.phone : "場館電話未知"}</p>
                                                      <p><strong>場館地址:</strong><br>  <span style="white-space: nowrap;">${gymInfo ? gymInfo.address : "場館地址未知"}</span></p>
                                                    </div>
                                                <div class="col m-auto m-0 p-0">
                                                    <img src="data:image/jpeg;base64,${gymInfo ? gymInfo.photo : ''}" alt="場館照片" width="200">
                                                </div>
                                            `,
                    showCancelButton: true,
                    confirmButtonColor: '#F24B88',
                    cancelButtonColor: '#2c3e50',
                    confirmButtonText: '確認預約',
                    cancelButtonText: '取消'
                }).then((result) => {
                    if (result.isConfirmed) {
                        confirmReservation(event);
                    }
                });
            };

            const confirmReservation = (event) => {
                // 隱藏模態視窗
                var modal = document.getElementById("myModal");
                if (modal !== null) {
                    modal.style.display = "none";
                }

                // 構建要發送到後端的數據
                const reservationData = {
                    "classId": event.extendedProps.classId,
                    // "trainerId": event.trainerId,
                    // "gymId": event.extendedProps.gymId,
                    "memberId": memberIdFromSession, 
                    // "startTime": event.startStr,
                    // "endTime": event.endStr,
                    // "buildTime": new Date().toISOString(),
                    // "courseStatus": "進行中"
                };
                //console.log(reservationData);
                // 使用fetch發送預約信息到後端
                fetch(`${ApiUrl}/api/Reservation`, {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(reservationData)
                }).then(response => {
                    if (response.ok) {
                        // 成功預約後，更新前端狀態
                        event.setExtendedProp('memberId', memberId);
                        // 重新渲染該事件以反映變化
                        event.remove();
                        calendarInstance.addEvent(event);
                        Swal.fire('成功', '課程預約成功', 'success');
                    } else {
                        Swal.fire('失敗', '預約失敗，請洽客服', 'error');
                    }
                }).catch(error => {
                    console.log("預約資訊傳送失敗請把Api打開!!: " + error.message);
                    Swal.fire('失敗', '預約失敗，請洽客服', 'error');
                });
            };

            // 在掛載後初始化日曆和獲取事件
            const onMounted = () => {
                initCalendar();
                //fetchEventsFromAPI().then(() => {
                //    calendarInstance.render();
                //});
            };

            return {
                showCalendar,
                toggleCalendar,
                onMounted
            };
        },
        mounted() {
            this.onMounted();
        }
    }).mount("#app");

</script>

         
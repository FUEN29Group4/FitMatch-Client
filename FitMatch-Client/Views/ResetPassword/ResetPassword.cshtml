
@{
    Layout = null;
    ViewData["Title"] = "ResetPassword";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11.3.0/dist/sweetalert2.all.min.js"></script>

<meta name="api-base-url" content="https://localhost:7011">

<style>
    html, body {
        height: 100%;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: black;
    }

    .reset-password-container {
        text-align: center;
        background-color: #F24B88;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .btn-primary {
        background-color: black;
        border-color: black;
    }

        .btn-primary:hover {
            background-color: #333;
            border-color: #333;
        }

</style>

<div class="reset-password-container">
    <h3>重置密碼</h3>
    <form id="reset-password-form">
        <div class="mb-3">
            <label for="newPassword" class="form-label">新密碼:</label>
            <input type="password" id="newPassword" name="newPassword" class="form-control" required data-validate="password" data-error-message="密碼格式不正確（至少8碼的英數字混合）">
        </div>
        <div class="mb-3">
            <label for="confirmPassword" class="form-label">確認新密碼:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
        </div>
        <input type="hidden" id="token" name="token">
        <button type="submit" class="btn btn-primary">提交</button>
    </form>
</div>



<script>

    // 顯示錯誤訊息
    function showErrorMessage(element, message) {
        let errorMessageElement = element.parentNode.querySelector('.error-message');
        if (!errorMessageElement) {
            errorMessageElement = document.createElement('span');
            errorMessageElement.className = 'error-message text-danger';
            element.parentNode.appendChild(errorMessageElement);
        }
        errorMessageElement.textContent = message;
    }

    // 清除錯誤訊息
    function clearErrorMessage(element) {
        const errorMessageElement = element.parentNode.querySelector('.error-message');
        if (errorMessageElement) {
            errorMessageElement.remove();
        }
    }

    // 密碼格式驗證（至少8碼的英數字混合）
    function validatePassword(password) {
        const regex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/; // 至少8碼的英數字混合
        return regex.test(password);
    }

    // 驗證函數
    function validate(element) {
        const validateRule = element.getAttribute('data-validate');
        const errorMessage = element.getAttribute('data-error-message');
        const value = element.value;

        if (validateRule === 'password') {
            if (!validatePassword(value)) {
                showErrorMessage(element, errorMessage);
                return false;
            }
        }

        // 清除錯誤訊息，如果通過驗證
        clearErrorMessage(element);
        return true;
    }

    // 在輸入或失去焦點時觸發驗證
    document.addEventListener("DOMContentLoaded", function () {
        const elementsToValidate = document.querySelectorAll('[data-validate]');
        elementsToValidate.forEach(function (element) {
            element.addEventListener('keyup', function () {
                clearErrorMessage(this);
                validate(this);
            });
            element.addEventListener('blur', function () {
                clearErrorMessage(this);
                validate(this);
            });
        });

        // 下面是您原有的重置密碼邏輯
        const urlParams = new URLSearchParams(window.location.search);
        const token = urlParams.get('token');

        if (token) {
            document.getElementById('token').value = token;
        }

        const form = document.getElementById('reset-password-form');
        form.addEventListener('submit', async function (event) {
            event.preventDefault();

            // Validate all input fields
            let allValid = true;
            const elementsToValidate = document.querySelectorAll('[data-validate]');
            elementsToValidate.forEach(function (element) {
                if (!validate(element)) {
                    allValid = false;
                }
            });

            // If any validation failed, stop the form submission
            if (!allValid) {
                await Swal.fire({
                    icon: "error",
                    title: "驗證錯誤",
                    text: "請確認欄位是否符合正確格式",
                    confirmButtonText: "OK"
                });
                return;
            }

            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (newPassword !== confirmPassword) {
                Swal.fire('兩次輸入的密碼不一致.');
                return;
            }

            const payload = {
                newPassword: newPassword,
                token: token
            };

            // Perform form submission using fetch
            try {
                const response = await fetch('https://localhost:7011/api/Login/resetPassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload),
                });

                const contentType = response.headers.get("content-type");
                let data;
                if (contentType && contentType.includes("application/json")) {
                    data = await response.json();
                } else {
                    data = await response.text();
                }

                if (typeof data === 'object' && data !== null && data.success) {
                    await Swal.fire('成功', '密碼重置成功', 'success').then(() => {
                        window.location.href = "/Login/Login";
                    });
                } else {
                    throw new Error(data || '密碼重置失敗');
                }
            } catch (error) {
                await Swal.fire('錯誤', error.message || '重置密碼過程中出現錯誤', 'error');
            }
        });
    });


</script>
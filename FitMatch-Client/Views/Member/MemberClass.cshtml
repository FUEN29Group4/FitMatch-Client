@{
    ViewBag.SubLayout = "MemberClass";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";
}





@*<script src="https://unpkg.com/vue@3"></script>*@
<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>


@*彥儀用的勿刪*@
<link href="~/css/Chat.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.js"></script>
@*彥儀用的勿刪*@

@* <meta name="api-base-url" content="https://localhost:7011"> *@

<link rel="stylesheet" href="~/css/memberclass.css">

<style>

    .table-centered td,
    .table-centered th {
        vertical-align: middle; /* 垂直置中 */
        text-align: center; /* 水平置中 */
    }
    /*儀*/
    .demoButton .btn:focus {
        background-color: green;
        border-color: green;
        color: white;
    }

    .demoButton button {
        background-color: transparent;
    }
</style>


<div style="background-color: #fff">
    @* 會員資料 *@
    <div class="container" id="app">
        <table class="table table-hover table-centered">
            
            <thead style="background-color: #F24B88;color:#fff">
                <button type="button" @@click="CloseSort" style="border-radius:5px;border-radius:5px ;margin:5px"><i class="fa-regular fa-circle-xmark">關閉篩選</i></button>
                <tr>
                    @*    <th>預約編號</th> *@
                    <th>
                        
                        教練
                        <button type="button" @@click="sortClassesByTrainer" style="margin-left:10px;border-radius:8px">
                            <i class="fa-solid fa-sort"></i>
                        </button>
                    </th>

                    <th>場館<button type="button" @@click="sortClassesByGym " style="margin-left:10px;border-radius:8px"><i class="fa-solid fa-sort"></i></button></th>

                    <th>課程狀態</th>
                    <th>課程時間<button type="button" @@click="sortClassesByStartTime" style="margin-left:10px;border-radius:8px"><i class="fa-solid fa-sort"></i></button></th>
                    <th>聯繫</th>
                </tr>
            </thead>

            <tbody v-for="classApi in sortedClasses">
                <!-- 如果某些關鍵數據是空的，就只顯示"未添加課程" -->
                <tr v-if="isEmptyClassData(classApi)">
                    <td colspan="6">未添加課程</td>
                </tr>


                <!-- 否則，顯示數據 -->
                <tr v-else v-for="trainer in classApi.trainers" :key="trainer.trainerId">
                    @*  <td>{{classApi.classId}}</td> *@
                    <td>{{classApi.trainers[0].trainerName}}</td>
                    <td>{{classApi.gyms[0].gymName}}</td>
                    <td>{{classApi.courseStatus}}</td>
                    @*   <td>{{ formatTimeToDetailedDate(classApi.buildTime) }}</td> *@
                    <td>{{ formatTimeToDetailedDate(classApi.startTime) }}</td>
                    <td>
                        <button class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#chatModal"
                                @@click="showChatHistory(classApi.trainers[0].trainerId)">
                            聯繫教練
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    @*@@彥儀用@@*@
    @*對話視窗開始*@
    <div id="chat">
        <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="chatModalLabel">聯繫教練</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div v-for="msg in chatHistory"
                             :class="{'chat-message-sent': msg.role === role, 'chat-message-received': msg.role !== role}">
                            <div class="chat-avatar">
                                <!-- 如果msg.photo存在，則顯示照片 -->
                                <img v-if="photoURLs[msg.senderId]" :src="photoURLs[msg.senderId]">
                                <!-- 否則，顯示ID -->
                                <div v-else>{{ msg.senderId }}</div>
                            </div>
                            <div class="chat-content">
                                {{ msg.messageContent }}
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input v-model="message" id="ChatInput" placeholder="輸入訊息" @@keyup.enter="sendMessage" />
                        <button @@click="sendMessage" class="btn btn-light" style="border-radius: 5px;padding:12px 14px"><i class="fa-solid fa-paper-plane"></i></button>
                    </div>
                    <div class="text-end demoButton">
                        <button type="button" id="demoButton" class="btn btn-outline-success m-2" style="border-radius: 5px;">DEMO1</button>
                        <button type="button" id="demoButton2" class="btn btn-outline-success m-2" style="border-radius: 5px;">DEMO2</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*對話視窗結束*@
</div>
<!-- body end -->


<script>



    //@@彥儀用@@
    //DEMO
    document.addEventListener("DOMContentLoaded", function () {
        var demoButton = document.getElementById("demoButton");
        if (demoButton) {
            demoButton.addEventListener("click", function () {
                var chatInput = document.getElementById("ChatInput");
                chatInput.value = "收到教練，請問服裝有什麼規定嗎?";

                var event = new Event('input', { bubbles: true });
                chatInput.dispatchEvent(event);
            });
        }
        var demoButton2 = document.getElementById("demoButton2");
        if (demoButton2) {
            demoButton2.addEventListener("click", function () {
                var chatInput = document.getElementById("ChatInput");
                chatInput.value = "感謝教練，我會遵守注意事項!";

                var event = new Event('input', { bubbles: true });
                chatInput.dispatchEvent(event);
            });
        }
    });
    const sharedState = {
        Id: null,
        isVisible: false,
    };//@@彥儀用結束@@

    const app1 = Vue.createApp({
        data() {
            return {
                ...sharedState,//@@彥儀用@@
                MemberClassAPIs: {
                    "classAPIWithTrainersAndClassTyoeAndGyms": [
                        {
                            "classId": 1,
                            "trainers": [
                                {
                                    "trainerId": 123,
                                    "trainerName": "John"
                                }
                            ],
                            "gyms": [
                                {
                                    "gymName": "Gym A"
                                }
                            ],
                            "courseStatus": "Active",
                            "buildTime": "10:00 AM"
                        }
                    ]
                },

                MemberFavorites: [],
                favoritesWithTrainersAndProducts1: [],
                favoritesWithTrainersAndProducts2: [],
                memberId: sessionStorage.getItem('memberId'),
                token: sessionStorage.getItem('token'),

                //排序
                sortByStartTime: false,
                sortByGym: false,
                sortByTrainer: false,

                trainerOccurrences: {}
            };
        },
        mounted() {
            this.MemberClassAPI();
        },
        computed: {

            //排序
            sortedClasses() {
                if (this.sortByGym) {
                    return [...this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms].sort((a, b) => {
                        const gymA = a.gyms && a.gyms[0] ? a.gyms[0].gymName : '';
                        const gymB = b.gyms && b.gyms[0] ? b.gyms[0].gymName : '';
                        return gymA.localeCompare(gymB);
                    });
                } else if (this.sortByStartTime) {
                    return [...this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms].sort((a, b) => {
                        const dateA = new Date(a.startTime);
                        const dateB = new Date(b.startTime);
                        return dateA - dateB;
                    });
                } else if (this.sortByTrainer) {
                    return [...this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms].sort((a, b) => {
                        const trainerA = a.trainers && a.trainers[0] ? a.trainers[0].trainerName : '';
                        const trainerB = b.trainers && b.trainers[0] ? b.trainers[0].trainerName : '';
                        return trainerA.localeCompare(trainerB);
                    });
                } // ... 之前的排序方法 ...
                else {
                    return [...this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms].sort((a, b) => {
                        const dateA = new Date(a.startTime);
                        const dateB = new Date(b.startTime);

                        if (a.courseStatus === '進行中' && b.courseStatus !== '進行中') return -1;
                        if (b.courseStatus === '進行中' && a.courseStatus !== '進行中') return 1;
                        if (a.courseStatus === '已完成' && b.courseStatus !== '已完成') return 1;
                        if (b.courseStatus === '已完成' && a.courseStatus !== '已完成') return -1;

                        // 這裡是新增的時間排序邏輯
                        if (a.courseStatus === '已完成' && b.courseStatus === '已完成') return dateA - dateB;
                        if (a.courseStatus === '進行中' && b.courseStatus === '進行中') return dateA - dateB;

                        return 0;
                    });
                }

            },


        },

        methods: {
            showChatHistory(Id) {//@@彥儀用@@
                this.Id = Id;
                chat.showChatHistory(Id);
            },
            MemberClassAPI() {
                if (!this.memberId) {  // 修改這裡
                    console.error("memberId not provided in the session");
                    return;
                }
                const headers = new Headers();
                // Assuming the token is stored in the session storage.
                // Adjust if it's stored elsewhere.
                const token = sessionStorage.getItem('token');
                if (token) {
                    headers.append('Authorization', `Bearer ${token}`);
                }
                // fetch(`https://localhost:7011/api/MemberClassAPI/${this.memberId}`, { // 修改這裡
                fetch(`https://localhost:7011/api/MemberClassAPI/${this.memberId}`, { // 修改這裡


                    method: 'GET',
                    headers: headers
                })
                    .then((response) => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`API request failed with status ${response.status}: ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                        this.MemberClassAPIs = data;
                    })
                    .catch((error) => {
                        console.error("API 請求失敗: " + error.message);
                    });
            },
            formatTimeToDetailedDate(dateTimeString) {
                const date = new Date(dateTimeString);
                if (isNaN(date.getTime())) {
                    return "NaN-NaN-NaN NaN:NaN";
                }
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${year}-${month}-${day} ${hours}:${minutes}`;
            },
            isEmptyClassData(classApi) {
                const formattedDate = this.formatTimeToDetailedDate(classApi.buildTime);
                return !classApi.classId ||
                    !classApi.trainers || classApi.trainers.length === 0 || !classApi.trainers[0].trainerName ||
                    !classApi.gyms || classApi.gyms.length === 0 || !classApi.gyms[0].gymName ||
                    !classApi.courseStatus ||
                    !classApi.buildTime ||
                    formattedDate.includes("NaN");
            },

            //排序
            sortClassesByStartTime() {
                this.sortByStartTime = !this.sortByStartTime;
                this.sortByGym = false;
                this.sortByTrainer = false;
                console.log(this.sortByStartTime);
            },
            sortClassesByGym() {
                this.sortByGym = !this.sortByGym;
                this.sortByStartTime = false; // 確保不同時進行時間排序
                this.sortByTrainer = false;
                console.log(this.sortByGym);
            },
            sortClassesByTrainer() {
                this.sortByTrainer = !this.sortByTrainer;
                this.sortByGym = false;
                this.sortByStartTime = false;

                // 計算每個教練的出現次數
                this.trainerOccurrences = {};
                this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms.forEach(classApi => {
                    if (classApi.trainers && classApi.trainers[0]) {
                        const trainerName = classApi.trainers[0].trainerName;
                        if (this.trainerOccurrences[trainerName]) {
                            this.trainerOccurrences[trainerName]++;
                        } else {
                            this.trainerOccurrences[trainerName] = 1;
                        }
                    }
                });

                // 根據教練出現的次數進行排序
                if (this.sortByTrainer) {
                    this.MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms.sort((a, b) => {
                        const trainerAName = a.trainers && a.trainers[0] ? a.trainers[0].trainerName : '';
                        const trainerBName = b.trainers && b.trainers[0] ? b.trainers[0].trainerName : '';

                        const trainerAOccurrences = this.trainerOccurrences[trainerAName] || 0;
                        const trainerBOccurrences = this.trainerOccurrences[trainerBName] || 0;

                        if (trainerAOccurrences === trainerBOccurrences) {
                            return 0;  // 出現次數相同，不變動排序順序
                        } else {
                            return trainerBOccurrences - trainerAOccurrences; // 注意此處是B-A，以便進行由多到少的排序
                        }
                    });
                }
                console.log(this.sortByTrainer);
            },
            CloseSort() {
                this.sortByTrainer = false;
                this.sortByGym = false;
                this.sortByStartTime = false;
            }



        },
    }).mount('#app')

</script>

@*@@彥儀用@@*@
<script src="~/js/Chat.js"></script>
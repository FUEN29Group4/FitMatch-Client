@{
    ViewBag.SubLayout = "MemberClass";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";
}





@*<script src="https://unpkg.com/vue@3"></script>*@
<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>


@*彥儀用的勿刪*@
<link href="~/css/Chat.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.js"></script>
@*彥儀用的勿刪*@


<link rel="stylesheet" href="~/css/memberclass.css">

<style>

    .table-centered td,
    .table-centered th {
        vertical-align: middle; /* 垂直置中 */
        text-align: center; /* 水平置中 */
    }

</style>


<div style="background-color: #fff">
    @* 會員資料 *@
    <div class="container" id="app">
        <table class="table table-bordered table-hover table-centered">
            <thead style="background-color: #F24B88;color:#fff">
                <tr>
                    <th>預約編號</th>
                    <th>教練</th>
                    <th>場館</th>
                    <th>課程狀態</th>
                    <th>課程時間</th>
                    <th>聯繫</th>
                </tr>
            </thead>

            <tbody v-for="classApi in MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms">

                <!-- 如果某些關鍵數據是空的，就只顯示"未添加課程" -->
                <tr v-if="isEmptyClassData(classApi)">
                    <td colspan="6">未添加課程</td>
                </tr>


                <!-- 否則，顯示數據 -->
                <tr v-else v-for="trainer in classApi.trainers" :key="trainer.trainerId">
                    <td>{{classApi.classId}}</td>
                    <td>{{classApi.trainers[0].trainerName}}</td>
                    <td>{{classApi.gyms[0].gymName}}</td>
                    <td>{{classApi.courseStatus}}</td>
                    <td>{{ formatTimeToDetailedDate(classApi.buildTime) }}</td>
                    <td>
                        <button class="btn btn-primary" style="border-radius:25px" @@click="showChatHistory(classApi.trainers[0].trainerId)">聯繫教練</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    @*@@彥儀用@@*@
    @*對話視窗開始*@
    <div id="chat">
        <div v-if="isChatHistoryVisible" class="overlay">
            <div class="chat-modal">
                <div class="chat-header">
                    <span class="close" @@click="isChatHistoryVisible = false"><i class="fa-solid fa-xmark"></i></span>
                </div>
                <div class="chat-body">
                    <div v-for="msg in chatHistory"
                         :class="{'chat-message-sent': msg.role === role, 'chat-message-received': msg.role !== role}">
                        <div class="chat-avatar">
                            <!-- 如果msg.photo存在，則顯示照片 -->
                            <img v-if="photoURLs[msg.senderId]" :src="photoURLs[msg.senderId]">
                            <!-- 否則，顯示ID -->
                            <div v-else>{{ msg.senderId }}</div>

                        </div>
                        <span class="chat-content">
                            {{ msg.messageContent }}
                        </span>
                    </div>
                </div>
                <div class="chat-footer">
                    <hr />
                    <input v-model="message" placeholder="輸入訊息" @@keyup.enter="sendMessage" />
                    <button @@click="sendMessage" class="btn btn-light" style="border-radius: 5px;padding:12px 14px"><i class="fa-solid fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>
    @*對話視窗結束*@
</div>
<!-- body end -->


<script>

    // const memberIdFromSession = sessionStorage.getItem('memberId');
    // if (!memberIdFromSession) {
    //     console.error("memberId not found in session storage");
    //     // You can also redirect the user or show an error message, if necessary.
    // }

    //@@彥儀用@@
    const sharedState = {
        Id: null,
        isVisible: false,
    };

    const app1 = Vue.createApp({
        data() {
            return {
                ...sharedState,//@@彥儀用@@
                MemberClassAPIs: {
                    "classAPIWithTrainersAndClassTyoeAndGyms": [
                        {
                            "classId": 1,
                            "trainers": [
                                {
                                    "trainerId": 123,
                                    "trainerName": "John"
                                }
                            ],
                            "gyms": [
                                {
                                    "gymName": "Gym A"
                                }
                            ],
                            "courseStatus": "Active",
                            "buildTime": "10:00 AM"
                        }
                    ]
                },

                MemberFavorites: [],
                favoritesWithTrainersAndProducts1: [],
                favoritesWithTrainersAndProducts2: [],
                memberId: sessionStorage.getItem('memberId'),
                token: sessionStorage.getItem('token'),
                
            };
        },
        mounted() {
            this.MemberClassAPI();
        },

        methods: {
            showChatHistory(Id) {//@@彥儀用@@
                this.Id = Id;
                chat.showChatHistory(Id); 
            },
            MemberClassAPI() {
                if (!this.memberId) {  // 修改這裡
                    console.error("memberId not provided in the session");
                    return;
                }
                const headers = new Headers();
                // Assuming the token is stored in the session storage.
                // Adjust if it's stored elsewhere.
                const token = sessionStorage.getItem('token');
                if (token) {
                    headers.append('Authorization', `Bearer ${token}`);
                }
                fetch(`https://localhost:7011/api/MemberClassAPI/${this.memberId}`, { // 修改這裡
                    method: 'GET',
                    headers: headers
                })
                    .then((response) => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`API request failed with status ${response.status}: ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                        this.MemberClassAPIs = data;
                    })
                    .catch((error) => {
                        console.error("API 請求失敗: " + error.message);
                    });
            },
            formatTimeToDetailedDate(dateTimeString) {
                const date = new Date(dateTimeString);
                if (isNaN(date.getTime())) {
                    return "NaN-NaN-NaN NaN:NaN";
                }
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${year}-${month}-${day} ${hours}:${minutes}`;
            },
            isEmptyClassData(classApi) {
                const formattedDate = this.formatTimeToDetailedDate(classApi.buildTime);
                return !classApi.classId ||
                    !classApi.trainers || classApi.trainers.length === 0 || !classApi.trainers[0].trainerName ||
                    !classApi.gyms || classApi.gyms.length === 0 || !classApi.gyms[0].gymName ||
                    !classApi.courseStatus ||
                    !classApi.buildTime ||
                    formattedDate.includes("NaN");
            },
        },
    }).mount('#app')

</script>

@*@@彥儀用@@*@
<script src="~/js/Chat.js"></script>
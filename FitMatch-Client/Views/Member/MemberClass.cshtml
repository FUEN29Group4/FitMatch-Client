@{
    ViewBag.SubLayout = "MemberClass";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";
}





@*<script src="https://unpkg.com/vue@3"></script>*@
<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>


@*彥儀用的勿刪*@
<link href="~/css/Chat.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.js"></script>
@*彥儀用的勿刪*@


<link rel="stylesheet" href="~/css/memberclass.css">

<style>

    .table-centered td,
    .table-centered th {
        vertical-align: middle; /* 垂直置中 */
        text-align: center; /* 水平置中 */
    }

</style>


<div style="background-color: #fff"  id="app">
    

        @* 會員資料 *@


        <hr>

        <div class="container">
            <table class="table table-bordered table-hover table-centered">
                <thead style="background-color: #F24B88;color:#fff">
                    <tr>
                        <th>預約編號</th>
                        <th>教練</th>
                        <th>場館</th>
                        <th>課程狀態</th>
                        <th>課程時間</th>
                        <th>聯繫</th>
                    </tr>
                </thead>

                <tbody v-for="classApi in MemberClassAPIs.classAPIWithTrainersAndClassTyoeAndGyms">

                    <!-- 如果某些關鍵數據是空的，就只顯示"未添加課程" -->
                    <tr v-if="isEmptyClassData(classApi)">
                        <td colspan="6">未添加課程</td>
                    </tr>


                    <!-- 否則，顯示數據 -->
                    <tr v-else v-for="trainer in classApi.trainers" :key="trainer.trainerId">
                        <td>{{classApi.classId}}</td>
                        <td>{{classApi.trainers[0].trainerName}}</td>
                        <td>{{classApi.gyms[0].gymName}}</td>
                        <td>{{classApi.courseStatus}}</td>
                        <td>{{ formatTimeToDetailedDate(classApi.buildTime) }}</td>
                        <td>
                            <button class="btn btn-primary" style="border-radius:25px" @@click=" showChatHistory(classApi.trainers[0].trainerId)">聯繫教練</button>

                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        @*對話視窗開始*@
        <div v-if="isChatHistoryVisible" class="overlay">
            <div class="chat-modal">
                <div class="chat-header">
                    <span class="close" @@click="isChatHistoryVisible = false">X</span>
                </div>
                <div class="chat-body">
                    <div v-for="msg in chatHistory"
                         :class="{'chat-message-sent': msg.role === role, 'chat-message-received': msg.role !== role}">
                        <div class="chat-avatar">
                            <!-- 如果msg.photo存在，則顯示照片 -->
                            <img v-if="photoURLs[msg.senderId]" :src="photoURLs[msg.senderId]">
                            <!-- 否則，顯示ID -->
                            <div v-else>{{ msg.senderId }}</div>

                        </div>
                        <span class="chat-content">
                            {{ msg.messageContent }}
                        </span>
                    </div>
                </div>
                <div class="chat-footer">
                    <input v-model="message" placeholder="輸入訊息" @@keyup.enter="sendMessage" />
                    <button @@click="sendMessage" class="btn btn-primary"><i class="fa-solid fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
        @*對話視窗結束*@
    </div>
</div>
<!-- body end -->


<script>

    // const memberIdFromSession = sessionStorage.getItem('memberId');
    // if (!memberIdFromSession) {
    //     console.error("memberId not found in session storage");
    //     // You can also redirect the user or show an error message, if necessary.
    // }


    //@@彥儀@@
    // 初始化 SignalR 连接
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7011/chatHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();



    Vue.createApp({
        data() {
            return {
                MemberClassAPIs: {
                    "classAPIWithTrainersAndClassTyoeAndGyms": [
                        {
                            "classId": 1,
                            "trainers": [
                                {
                                    "trainerId": 123,
                                    "trainerName": "John"
                                }
                            ],
                            "gyms": [
                                {
                                    "gymName": "Gym A"
                                }
                            ],
                            "courseStatus": "Active",
                            "buildTime": "10:00 AM"
                        }
                    ]
                },

                MemberFavorites: [],
                favoritesWithTrainersAndProducts1: [],
                favoritesWithTrainersAndProducts2: [],
                memberId: sessionStorage.getItem('memberId'),
                token: sessionStorage.getItem('token'),
                showTrainer: 'trainer',


                isChatHistoryVisible: false, //@@彥儀@@
                chatHistory: [], //@@彥儀@@
                message: "", //@@彥儀@@
                senderId: null, //@@彥儀@@
                receiverId: null, //@@彥儀@@
                role: "",  //@@彥儀@@
                photoURLs: {}//@@彥儀@@

            };
        },
        mounted() {
            this.MemberClassAPI();
        },
        async created() {//@@彥儀@@
            // 從 sessionStorage 中獲取 senderId 和 role
            this.senderId = sessionStorage.getItem('memberId') || sessionStorage.getItem('trainerId');
            this.role = sessionStorage.getItem('memberId') ? 'Member' : 'Trainer';
            // 啟動 SignalR 連線
            this.connect();
        },
        
        methods: {

            sendTrainerIdToChat(trainerId) {
                // 获取 Chat.js 组件的实例
                const chatComponent = this.$refs.chatComponent;

                // 调用 Chat.js 组件的 receiveTrainerId 方法并传递 trainerId
                chatComponent.receiveTrainerId(trainerId);
            },
            MemberClassAPI() {
                if (!this.memberId) {  // 修改這裡
                    console.error("memberId not provided in the session");
                    return;
                }
                const headers = new Headers();
                // Assuming the token is stored in the session storage.
                // Adjust if it's stored elsewhere.
                const token = sessionStorage.getItem('token');
                if (token) {
                    headers.append('Authorization', `Bearer ${token}`);
                }
                fetch(`https://localhost:7011/api/MemberClassAPI/${this.memberId}`, { // 修改這裡
                    method: 'GET',
                    headers: headers
                })
                    .then((response) => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`API request failed with status ${response.status}: ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                        this.MemberClassAPIs = data;
                    })
                    .catch((error) => {
                        console.error("API 請求失敗: " + error.message);
                    });
            },
            formatTimeToDetailedDate(dateTimeString) {
                const date = new Date(dateTimeString);
                if (isNaN(date.getTime())) {
                    return "NaN-NaN-NaN NaN:NaN";
                }
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${year}-${month}-${day} ${hours}:${minutes}`;
            },
            isEmptyClassData(classApi) {
                const formattedDate = this.formatTimeToDetailedDate(classApi.buildTime);
                return !classApi.classId ||
                    !classApi.trainers || classApi.trainers.length === 0 || !classApi.trainers[0].trainerName ||
                    !classApi.gyms || classApi.gyms.length === 0 || !classApi.gyms[0].gymName ||
                    !classApi.courseStatus ||
                    !classApi.buildTime ||
                    formattedDate.includes("NaN");
            },
            async loadPhoto(id, role) {//@@彥儀@@
                if (!this.photoURLs[id]) {
                    try {
                        const response = await fetch(`https://localhost:7011/api/Chat/Photo/${id}/${role}`);
                        if (response.ok) {
                            //const url = await response.text();
                            //this.photoURLs[id] = url;
                            const jsonResponse = await response.json(); // 解析 JSON
                            const base64String = jsonResponse.photo; // 從 JSON 中提取出 base64 字串
                            this.photoURLs[id] = 'data:image/jpeg;base64,' + base64String;
                        }
                    } catch (error) {
                        console.error("照片加載失敗:", error);
                    }
                }
            },
            connect: async function () {//@@彥儀@@
                if (connection.state === signalR.HubConnectionState.Disconnected) {
                    // 處裡關閉事件
                    if (!connection.connectionClosed) {
                        connection.onclose((error) => {
                            console.warn('連線已關閉:', error);
                            this.connect();
                        });
                        connection.connectionClosed = true;
                    }

                    try {
                        await connection.start();
                        console.log('連線已啟動！');
                    } catch (err) {
                        console.error('建立連線時出錯 :', err);
                    }
                } else {
                    console.warn('連線失敗狀態:', connection.state);
                }// 訂閱接收消息事件
                connection.on("ReceiveMessage", (senderId, message, role) => {
                    // 添加新消息到 chatHistory
                    this.chatHistory.push({ senderId, messageContent: message, role });
                    // 捲動到最新消息
                    this.scrollToBottom();
                });
            },
            showChatHistory(receiverId) {//@@彥儀@@
                this.receiverId = receiverId;
                this.isChatHistoryVisible = true;
                this.loadChatHistory();
                // 使用 $nextTick 讓聊天紀錄完成後自動跑到底部 但還沒實現之後再調整
                this.$nextTick(() => {
                    this.scrollToBottom();
                });

            },
            scrollToBottom() {//@@彥儀@@
                const chatBody = document.querySelector('.chat-body');
                if (chatBody) {
                    chatBody.scrollTop = chatBody.scrollHeight;
                }
            },
            async loadChatHistory() {//@@彥儀@@
                try {
                    const response = await fetch(`https://localhost:7011/api/Chat/GetHistory/${this.senderId}/${this.receiverId}?role=${this.role}`);
                    if (response.ok) {
                        const data = await response.json();
                        this.chatHistory = data;
                        // 加载照片
                        for (const msg of data) {
                            this.loadPhoto(msg.senderId, msg.role);
                        }
                    }
                } catch (error) {
                    console.error("找不到歷史對話紀錄:", error);
                }
            },
            async sendMessage(event) {//@@彥儀@@
                if (event) event.preventDefault(); // 防止換行
                if (connection.state === signalR.HubConnectionState.Connected) {
                    try {
                        await connection.invoke("SendMessage", this.receiverId, this.message, this.senderId, this.role);
                        //console.log('傳送訊息成功:',this.receiverId, this.message, this.senderId, this.role);
                        this.chatHistory.push({ senderId: this.senderId, messageContent: this.message, role: this.role });
                        //console.log('增加訊息成功:', this.senderId, this.message, this.role);
                        this.message = "";
                        this.$nextTick(() => {
                            const chatBody = document.querySelector('.chat-body');
                            chatBody.scrollTop = chatBody.scrollHeight;
                        });
                    } catch (err) {
                        console.error("傳送訊息時出錯", err);
                    }
                } else {
                    console.warn('SignalR沒連結成功');
                }
            },
        },
    }).mount('#app')

</script>
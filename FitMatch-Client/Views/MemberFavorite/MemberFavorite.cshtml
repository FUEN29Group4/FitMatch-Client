@{
    ViewBag.SubLayout = "MemberFavorite";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";
}

<link rel="stylesheet" href="~/css/memberclass.css">



<div style="background-color: #fff" id="app">
    
    <div class="container col-6">
        <div class=" container btn-group" >

            <!-- 教練選項 -->
            <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked v-model="showTrainer" value="trainer">
            <label class="btn" for="btnradio1" style="background-color:#F24B88;color:#fff;border-radius:15px" checked>教練</label>

            <!-- 商品選項 -->
            <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" v-model="showTrainer" value="product">
            <label class="btn" for="btnradio2" style="margin-left:50px;border-radius:15px;background-color:#F24B88;color:#fff">商品</label>

        </div>
    </div>

    <hr />

    <div class="container-md pt-3" style="padding-bottom: 50px">
        <div class="row g-2 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5">

            <!-- 當 showTrainer 為 'trainer' 時顯示以下內容 start-->
            <div v-if="showTrainer === 'trainer'" v-for="memberFavorite in MemberFavorites.favoritesWithTrainersAndProducts1" :key="memberFavorite.memberFavoriteId">
                <div v-for="trainer in memberFavorite.trainers" :key="trainer.trainerId">
                    <!-- 教練的內容  start -->
                    <div class="card mh-250px card1 overflow-hidden">
                        <div class="card-image">
                            <img :src="'data:image/jpeg;base64,' + trainer.photo" alt="Trainer Image" style="width: 220px; height: 220px; object-fit: cover;" />
                        </div>
                        <div class="card-footer bg-white border-top-0 fz-12px d-flex align-items-center p-2 ">
                            <span class="me-auto" style="font-weight: bold; font-size: 20px;">
                                {{ trainer.trainerName }}
                            </span>
                            <!-- For 教練的刪除 -->
                            
                            <i class="fa-solid fa-heart" style="color:red; transform: scale(1.3);" v-on:click="showDeleteConfirmation('trainer', trainer.trainerId)"></i>
                        </div>
                    </div>
                </div>
            </div>
            <!-- 教練的內容 end -->
            <!-- 當 showTrainer 為 'trainer' 時顯示以下內容 end -->
            <!-- 當 showTrainer 為 'product' 時顯示以下內容 start -->
            <div v-else v-for="memberFavorite in MemberFavorites.favoritesWithTrainersAndProducts2" :key="memberFavorite.memberFavoriteId">
                <div v-for="product in memberFavorite.products" :key="product.productId">
                    <!-- 商品的內容 start -->
                    <div class="card mh-250px card1 overflow-hidden">
                        <div class="card-image">
                            <img :src="'data:image/jpeg;base64,' + product.photo" alt="Product Image" style="width: 220px; height: 220px; object-fit: cover;" />
                        </div>
                        <div class="card-footer bg-white border-top-0 fz-12px d-flex align-items-center p-2 ">
                            <span class="me-auto" style="font-weight: bold; font-size: 20px;">
                                {{ product.productName }}
                            </span>
                            <!-- For 商品的刪除 -->
                            <i class="fa-solid fa-heart" style="color:red; transform: scale(1.3);" v-on:click="showDeleteConfirmation('product', product.productId)"></i>
                        </div>
                    </div>
                </div>
            </div>
             <!-- 商品的內容 end -->
            <!-- 當 showTrainer 為 'product' 時顯示以下內容 end -->
        </div>
    </div>
</div>






<script>
    // const memberIdFromSession = sessionStorage.getItem('memberId');
    // if (!memberIdFromSession) {
    //     console.error("memberId not found in session storage");
    //     // You can also redirect the user or show an error message, if necessary.
    // }

    Vue.createApp({
        data() {
            return {
                MemberFavorites: [],
                favoritesWithTrainersAndProducts1: [],
                favoritesWithTrainersAndProducts2: [],
                memberId: sessionStorage.getItem('memberId'),
                token: sessionStorage.getItem('token'),
                showTrainer: 'trainer'
            };
        },
        mounted() {
            if (!this.memberId || !this.token) {
                console.error("memberId or token not found in session storage");
                // You can also redirect the user or show an error message, if necessary.
                return;
            }
            this.MemberFavorite();
        },
        methods: {
            MemberFavorite() {
                const headers = new Headers();
                headers.append('Authorization', `Bearer ${this.token}`);

                fetch(`https://localhost:7011/api/MemberFavorite/${this.memberId}`, {
                    headers: headers
                })
                    .then((response) => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`API request failed with status ${response.status}: ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                        this.MemberFavorites = data;
                    })
                    .catch((error) => {
                        console.error("API 請求失敗: " + error.message);
                    });
            },
            async deleteFavorite(type, id) {
                let url;
                let memberId = new URLSearchParams(window.location.search).get('id');

                if (type === 'trainer') {
                    url = `https://localhost:7011/api/MemberFavorite/${this.memberId}/trainer/${id}`;
                } else {
                    url = `https://localhost:7011/api/MemberFavorite/${this.memberId}/product/${id}`;
                }

                try {
                    const response = await fetch(url, {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        await Swal.fire({
                            icon: "success",
                            title: "成功移除",
                            text: "已成功移除一項收藏清單資料",
                            showConfirmButton: true,
                            confirmButtonText: "確認"
                        });
                        this.MemberFavorite();
                    } else {
                        throw new Error("表單提交失敗");
                    }
                } catch (error) {
                    await Swal.fire({
                        icon: "error",
                        title: "錯誤",
                        text: error.message,
                        confirmButtonText: "OK"
                    });
                }
            },
            showDeleteConfirmation(type, id) {
                Swal.fire({
                    title: '確定要移除一項收藏清單資料嗎？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#2BC17B',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: '確定',
                    cancelButtonText: '取消'
                }).then((result) => {
                    if (result.isConfirmed) {
                        this.deleteFavorite(type, id);
                    }
                });
            },
        },
    }).mount('#app')
    
</script>
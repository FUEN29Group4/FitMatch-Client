@{
    ViewBag.SubLayout = "Trainer";
    Layout = "~/Views/Shared/_TrainerLayout.cshtml";
}


<!-- 周曆 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/2.3.0/luxon.min.js"></script>




    <style>
        /* 預約區塊 */
        .fc-scrollgrid {
            background-color: #f8f9fa;

        }

        .fc-theme-standard .fc-scrollgrid,
        .fc td,
        .fc th {
            border-color: #6C7293;
        }

        .fc-col-header-cell-cushion {
            color: #2c2b2b;
        }

        .fc-scrollgrid-shrink-frame {
            color: #a7a7b8;
        }

        .fc-timegrid-slot-label-cushion {
            margin-top: 10px;
            color: #2c2b2b;

        }

     
         table th {
            text-align: center;
            white-space: pre-line;
            /* 換行保留 */
            color: #ffff;
            font-weight: normal;
        }

         .time-cell {
            text-align: center;
            font-size: 18px;
            color: #ffff;
        }

         .btn-primary:focus {
            color: #fff;
            background-color: #BF3B6C;
            border-color: #BF3B6C;
            box-shadow: 0 0 0 .25rem #582337;
        }

        .fc-timegrid-slot-label-cushion {
            height: 40px;
        }

        .fc-toolbar-title {
            color: #f24b88;
          
        }
        .fc .fc-toolbar-title{
             text-align: center;
        }
        .fc-day {
            background-color: #fff;
        }

        .fc-day-today {
            background-color: #afafaf88 !important;

        }

        .fc-event-main {
            display: flex;
            align-items: center;
            justify-content: center;

        }

        

        .fc-timegrid-event .fc-event-main {
            padding: 0;
        }

         .available:hover {
            background-color: rgb(1, 100, 1);
        }

         .booked {
            background-color: grey;
            pointer-events: none;
        }

        #addButton {
            position: absolute;
            top: 10px;
            /* 调整按钮的垂直位置 */
            left: 10px;
            /* 调整按钮的水平位置 */
            z-index: 1;
            /* 确保按钮位于日历的上方 */
            /* 其他样式属性 */
        }

        input[type="text"] {
            width: 100%;
            padding: 12px 20px;
            margin: 8px 0;
            box-sizing: border-box;
        }

        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }
        
    </STyle>
     
    
    <div class="container bg-white">
        <div class="date" id="calendar">
        </div>
    </div>


<script>
const { DateTime } = luxon;
const TrainerIdFromSession = sessionStorage.getItem('trainerId');
var calendar;
var todayGymName = "";
function toTaipeiDateTime(date) {
    return DateTime.fromJSDate(date).setZone('Asia/Taipei');
}
function fromTaipeiDateTime(dateTime) {
    return dateTime.toJSDate();
}
function hasAnyReservationsForDate(date) {
    const eventsForDate = calendar.getEvents().filter(event => {
        const eventDate = event.start;
        return eventDate.getFullYear() === date.getFullYear() && 
               eventDate.getMonth() === date.getMonth() &&
               eventDate.getDate() === date.getDate() && 
               event.extendedProps.memberName;
    });
    return eventsForDate.length > 0;
}
function hasVenueReservationForDate(date) {
    const venueEventsForDate = calendar.getEvents().filter(event => {
        const eventDate = event.start;
        return eventDate.getFullYear() === date.getFullYear() && 
               eventDate.getMonth() === date.getMonth() &&
               eventDate.getDate() === date.getDate() && 
               event.allDay;
    });
    return venueEventsForDate.length > 0;
}
// 檢查日期是否在今天或之前
function isPastOrToday(date) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date <= today;
}
// 將格式化時間的功能封裝成函數
function formatTime(dateTime) {
        console.log(date, typeof date);  // 加入這行來檢查 date 的值和類型

    return dateTime.toFormat('HH:mm');
}

function loadEvents() {
        console.log("Loading events...");

    if (!TrainerIdFromSession) {
        console.error('TrainerIdFromSession is missing from the URL');
        return;
    }

    fetch("https://localhost:7011/api/TrainerClass/" + TrainerIdFromSession)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (Array.isArray(data)) {
               console.log("Data fetched:", data);
                populateEvents(data);
                calendar.render();  // 重新渲染日曆
            } else {
                throw new Error('Unexpected data format');
            }
        })
  .catch(error => {
            console.error('Error loading events:', error);
            Swal.fire({
                icon: 'error',
                title: '错误',
                text: '加载预约数据时发生错误，请刷新页面重试。'
            });
        });
}

function getGymsForDate(date) {
    let dateEvents = calendar.getEvents().filter(event => {
        const eventDate = event.start;
        return eventDate.getFullYear() === date.getFullYear() && 
               eventDate.getMonth() === date.getMonth() &&
               eventDate.getDate() === date.getDate() && 
               event.allDay;
    });
    
    // 如果当天有多个全天事件（应该不会），则将它们的标题（也就是健身房名称）合并
    return dateEvents.map(event => event.title).join(', ');
}
function populateEvents(data) {
    console.log("Populating events with data:", data);
    const gymDetailsByDate = {};

    data.forEach(eventData => {
       const eventDate = toTaipeiDateTime(new Date(eventData.startTime));
const dateKey = fromTaipeiDateTime(eventDate).toISOString().split('T')[0];

        if (!gymDetailsByDate[dateKey]) {
            gymDetailsByDate[dateKey] = {
                gymNames: new Set(),
                addresses: new Set()
            };
        }

        gymDetailsByDate[dateKey].gymNames.add(eventData.gymName);
        gymDetailsByDate[dateKey].addresses.add(eventData.address);
    });
        console.log("Gym details by date:", gymDetailsByDate);


   for (let [date, gymDetails] of Object.entries(gymDetailsByDate)) {
        const allGymNames = Array.from(gymDetails.gymNames).join(', ');
        const allAddresses = Array.from(gymDetails.addresses).join(', ');

        calendar.addEvent({
            title: allGymNames,
            start: new Date(date),
            allDay: true,
            extendedProps: {
                addresses: allAddresses
            }
        });
    }


    // 將其他事件加入到日曆上
    data.forEach(eventData => {
        const startTime = formatTime(toTaipeiDateTime(new Date(eventData.startTime)));
const endTime = formatTime(toTaipeiDateTime(new Date(eventData.endTime)));
        
        let eventTitle = '';
        let eventColor = 'green'; // 預設顏色為藍色

        if (eventData.courseStatus === '已過期' || eventData.courseStatus === '已完成') {
            eventTitle = '已結束';
            eventColor = 'gray';
        } else {
            eventTitle = eventData.memberName 
                ? `${startTime}-${endTime} ${eventData.memberName}`
                : `${startTime}-${endTime} 未預約`;
        }

        calendar.addEvent({
            title: eventTitle,
            start: new Date(eventData.startTime),
            end: new Date(eventData.endTime),
            backgroundColor: eventColor,
            borderColor: eventColor,
            extendedProps: {
                memberName: eventData.memberName,
                className: eventData.className,
                gymName: eventData.gymName,
                courseStatus: eventData.courseStatus
            }
        });
    });
}
function handleEventClick(eventInfo) {
    const { memberName } = eventInfo.event.extendedProps;

    if (memberName) {
        Swal.fire({
            icon: 'info',
            title: '該時間段已被註冊',
            text: '已被 ' + memberName + ' 預約，無法更改。',
            confirmButtonText: '確定'
        });
    } else {
        Swal.fire({
            icon: 'warning',
            title: '該時間段未被註冊',
            text: '是否要移除？',
            showCancelButton: true,
            confirmButtonText: '移除',
            cancelButtonText: '取消'
        }).then((result) => {
            if (result.isConfirmed) {
                eventInfo.event.remove();
            }
        });
    }
    }

function formatDateToISO(date) {
    return DateTime.fromJSDate(date).toISODate();  // 將 JS Date 轉換為 Luxon 的 DateTime 並格式化為 ISO 日期
}
function checkDateAvailability(date) {
    const eventsOnDate = calendar.getEvents().filter(event =>
    fromTaipeiDateTime(toTaipeiDateTime(event.start)).toISOString().split('T')[0] === fromTaipeiDateTime(toTaipeiDateTime(date)).toISOString().split('T')[0]
);

    const hasVenueEvent = eventsOnDate.some(event => event.allDay);

    // 排除整天的事件，只檢查特定的時間段
    const timeSlotEvents = eventsOnDate.filter(event => !event.allDay);
    const hasOtherTimeSlotEvent = timeSlotEvents.length > 0;

    return {
        hasVenueEvent,
        hasOtherTimeSlotEvent
    };
}







function openVenueModal(date) {
    const availability = checkDateAvailability(date);

    console.log("Opening venue modal for date:", date);

    if (!calendar) {
        console.error('Calendar instance not initialized');
        return;
    }

    const taiwanCities = ["未選擇", "台北市", "新北市", "桃園市", "台中市", "台南市", "高雄市", "基隆市"];

    const existingVenueEvent = calendar.getEvents().find(event =>
        event.start.toISOString().split('T')[0] === date.toISOString().split('T')[0] && event.allDay
    );

    console.log("Existing Venue Event:", existingVenueEvent);

    let existingVenueName = existingVenueEvent ? existingVenueEvent.title : "還沒加入任何場館";
    let existingVenueAddress = existingVenueEvent && existingVenueEvent.extendedProps
        ? existingVenueEvent.extendedProps.addresses
        : "";

    let btnText = availability.hasTimeSlotEvent ? "無法改變場館" : "更新場館資訊";
    let btnDisabled = availability.hasTimeSlotEvent;

    fetch('https://localhost:7011/api/TrainerClass')
        .then(response => {
            if (!response.ok) throw new Error("Failed to fetch gym data");
            return response.json();
        })
        .then(data => {
            const cityOptions = taiwanCities.map(city =>
                `<option value="${city}" ${city === "未選擇" ? 'disabled selected' : ''}>${city}</option>`
            ).join('');

            const getGymsByCity = (city) => data.filter(gym => city === "未選擇" || gym.address.includes(city)).map(gym => {
                const isSelected = existingVenueName === gym.gymName ? 'selected' : '';
                return `<option data-address="${gym.address}" value="${gym.gymId}" ${isSelected}>${gym.gymName}</option>`;
            }).join('');

            const initialGymOptions = getGymsByCity("未選擇");
            let removeBtnDisabled = availability.hasTimeSlotEvent ? 'disabled' : '';
            Swal.fire({
                confirmButtonText: '更新場館資訊',
                confirmButtonColor: '#3085d6',
                showConfirmButton: false,
                title: '場館資訊',
                html: `
                    <div>當前場館名稱: ${existingVenueName}</div>
                    <div>地址: ${existingVenueAddress}</div>
                    <hr/>
                    <div>${btnText}:</div>
                    <select id="city-select">${cityOptions}</select>
                    <select id="gym-select">
                        <option value="" disabled selected>請選擇</option>
                        ${initialGymOptions}
                    </select>
                    <div id="gym-address">地址: ${existingVenueAddress}</div>
                    <button id="remove-venue-btn" class="swal-btn remove-btn" ${removeBtnDisabled}>移除場館</button>
                    <button id="custom-confirm-btn" class="swal-btn default-btn" ${btnDisabled ? 'disabled' : ''}>更新場館資訊</button>
                `,
                preConfirm: () => {
                    const gymId = parseInt(document.getElementById('gym-select').value, 10);
                    const selectedGym = data.find(gym => gym.gymId === gymId);
                    const venueName = selectedGym ? selectedGym.gymName : "";
                    const address = selectedGym ? selectedGym.address : "";

                    // 移除現有場館事件
                    if (existingVenueEvent) {
                        existingVenueEvent.remove();
                    }

                    // 如果沒有已預設的場館，則添加新事件
                    if (venueName) {
                        calendar.addEvent({
                            title: venueName,
                            start: date,
                            allDay: true,
                            extendedProps: {
                                addresses: address
                            }
                        });
                    }
                },
didOpen: () => {
    const citySelect = document.getElementById('city-select');
    const gymSelect = document.getElementById('gym-select');
    const gymAddressDiv = document.getElementById('gym-address');
    const removeVenueBtn = document.getElementById('remove-venue-btn');
    const confirmBtn = document.getElementById('custom-confirm-btn');

    citySelect.addEventListener('change', (e) => {
        const selectedCity = e.target.value;
        const gymOptions = getGymsByCity(selectedCity);
        gymSelect.innerHTML = `<option value="" disabled selected>請選擇</option>${gymOptions}`;
    });

    gymSelect.addEventListener('change', (e) => {
        const selectedGymId = parseInt(e.target.value, 10);
        const selectedGym = data.find(gym => gym.gymId === selectedGymId);
        gymAddressDiv.textContent = `地址: ${selectedGym ? selectedGym.address : ''}`;
    });

  removeVenueBtn.addEventListener('click', () => {
    const availability = checkDateAvailability(date); // 获取当天事件的可用性
    console.log("hasOtherTimeSlotEvent:", availability.hasOtherTimeSlotEvent);

    if (availability.hasOtherTimeSlotEvent) {
        Swal.fire({
            icon: 'error',
            title: '錯誤',
            text: '當天存在其他時間段事件，無法移除場館事件',
            confirmButtonText: '確定'
        });
    } else if (!availability.hasVenueEvent) {
        Swal.fire({
            icon: 'error',
            title: '錯誤',
            text: '你尚未設定場館',
            confirmButtonText: '確定'
        });
    } else {
        console.log("Removing existing venue event:", existingVenueEvent);
        existingVenueEvent.remove();
        Swal.close();
    }
});



    confirmBtn.addEventListener('click', () => {
        const gymId = parseInt(gymSelect.value, 10);
        const selectedGym = data.find(gym => gym.gymId === gymId);
        if (!selectedGym) {
            Swal.showValidationMessage('請選擇場館');
        } else {
            Swal.clickConfirm();
        }
    });
}


            });
        })
        .catch(error => {
            console.error("Error fetching gym data:", error);
        });
}



function openTimeSlotModal(date) {
    const targetEvent = calendar.getEvents().find(event => {
        const eventDate = event.start;
        return eventDate.getFullYear() === date.getFullYear() &&
               eventDate.getMonth() === date.getMonth() &&
               eventDate.getDate() === date.getDate() &&
               eventDate.getHours() === date.getHours();
    });

    if (targetEvent && targetEvent.extendedProps.memberName) {
        Swal.fire({
            icon: 'success',
            title: '該時間段已被註冊',
            showCancelButton: true,
            cancelButtonText: '移除',
            showConfirmButton: false
        }).then((result) => {
            if (result.isDismissed) {
                targetEvent.remove();
            }
        });
    } else if (targetEvent) {
        Swal.fire({
            icon: 'info',
            title: '該時間段未被註冊',
            text: '是否要移除？',
            showCancelButton: true,
            cancelButtonText: '否',
            confirmButtonText: '移除'
        }).then((result) => {
            if (result.isConfirmed) {
                targetEvent.remove();
            }
        });
    } else {
        // 如果没有任何事件在该时间段，保持原来的行为
        let endDate = new Date(date);
        endDate.setHours(endDate.getHours() + 1);

        const startTimeStr = formatTime(toTaipeiDateTime(date));
        const endTimeStr = formatTime(toTaipeiDateTime(endDate));

        Swal.fire({
            title: '預約時段: ' + startTimeStr + ' - ' + endTimeStr,
            text: '確定開課嗎？',
            showCancelButton: true,
            confirmButtonText: '確定開課',
            cancelButtonText: '取消'
        }).then((result) => {
            if (result.isConfirmed) {
                const event = {
                    title: startTimeStr + ' - ' + endTimeStr + '新增的課程時間段',
                    start: date,
                    end: endDate,
                    backgroundColor: 'red',
                    borderColor: 'red'
                };
                calendar.addEvent(event);
                Swal.fire({
                    icon: 'success',
                    title: '該時間段已被註冊'
                });
            }
        });
    }
}

function formatTime(luxonDate) {
    console.log(luxonDate, typeof luxonDate); // 查看日期的值和類型
    let hours = luxonDate.hour;   // 使用Luxon的hour屬性
    let minutes = luxonDate.minute; // 使用Luxon的minute屬性
    let period = 'AM';

    if (hours >= 12) {
        period = 'PM';
        hours = hours > 12 ? hours - 12 : hours; // 如果超过12，将其转换为12小时制
    }

    return (hours < 10 ? '0' : '') + hours + ':' + (minutes < 10 ? '0' : '') + minutes + ' ' + period;
}


function removeEvent(eventId) {
    let event = calendar.getEventById(eventId);
    if (event) {
        event.remove();
    }
}

document.addEventListener('DOMContentLoaded', function () {
    var calendarEl = document.getElementById('calendar');

    calendar = new FullCalendar.Calendar(calendarEl, {
        eventClick: handleEventClick,
        eventDidMount: function(info) {
            if (info.event.extendedProps.memberName) {
                info.el.style.backgroundColor = '#ff0000';  // 紅色表示該時間段已被預約
                info.el.setAttribute('title', '無法更改場館');
            }
        },
        initialView: 'timeGridWeek',
        contentHeight: 'auto',
        slotDuration: '01:00:00',   
        slotMinTime: '09:00:00',
        slotMaxTime: '21:00:00',   
        displayEventTime: false,
        allDayText: '場館',
        headerToolbar: {
            left: 'prev',
            center: 'title',
            right: 'next today'
        },
        dayHeaderContent: function (headerInfo) {
            var container = document.createElement('div');
            container.style.display = 'flex';
            container.style.flexDirection = 'column';
            container.style.alignItems = 'center'; 

            var dateElem = document.createElement('div');
            dateElem.innerText = headerInfo.date.toLocaleDateString();
            container.appendChild(dateElem);

            var btn = document.createElement('button');
            btn.innerText = '新增場館';
            btn.style.marginTop = '5px';
            
           if (hasAnyReservationsForDate(headerInfo.date) || isPastOrToday(headerInfo.date)) {
    btn.style.backgroundColor = 'red';  // 讓按鈕變成紅色
    btn.disabled = true;                // 禁止點擊按鈕
    btn.innerText = '無法改變場館';
} else {
    btn.addEventListener('click', function () {
        openVenueModal(headerInfo.date);
    });
}
            
            container.appendChild(btn);
            return { domNodes: [container] };
        },
       dateClick: function(info) {
    if (!isPastOrToday(info.date)) {
        if (hasVenueReservationForDate(info.date)) {
            openTimeSlotModal(info.date);
        } else {
            Swal.fire({
                icon: 'error',
                title: '錯誤',
                text: '請先增加場館事件再新增時間段。',
                confirmButtonText: '確定'
            });
        }
    }
}


    });

    calendar.render();
    loadEvents();
});




</script>


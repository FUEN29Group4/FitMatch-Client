@{
    ViewBag.SubLayout = "Trainer";
    Layout = "~/Views/Shared/_TrainerLayout.cshtml";
}
<script src="https://unpkg.com/vue@3"></script>
<script src="https://unpkg.com/vuex@4"></script>
@*<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.all.min.js"></script>*@
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

@*彥儀用的勿刪*@
<link href="~/css/Chat.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.js"></script>
@*彥儀用的勿刪*@
<style>
    body {
        background-color: #fff;
    }

    thead th {
        color: white; /* 或其他您喜歡的顏色 */
    }

    .btn-space {
        margin-right: 10px; /* 依您的需求調整間隔 */
    }
    /*儀*/
    .demoButton .btn:focus {
        background-color: green;
        border-color: green;
        color:white;
    }
</style>

<div class="container" id="app">
    <table class="table table-bordered table-hover tableRecord serviceBtn">
        <thead style="background-color: #F24B88;">
            <tr>
                <th>會員姓名</th>
                <th>上課開始時間</th>
                <th>上課結束時間</th>
                <th>健身房名稱</th>
                <th>狀態</th>
                <th></th>
            </tr>
        </thead>
        <tbody class="class tr">
            <tr v-for="cls in sortedClasses" :key="cls.classId">
                <td>{{ cls.memberName }}</td>
                <td>{{ formatTo12Hour(cls.startTime) }}</td>
                <td>{{ formatTo12Hour(cls.endTime) }}</td>
                <td>{{ cls.gymName }}</td>
                <td>{{ cls.courseStatus }}</td>


                <td>
                    <button type="button"
                            class="btn btn-primary btn-space"
                            style="background-color: #F24B88; color: aliceblue;"
                            @@click="showClassRecords(cls.memberId)">
                        上課紀錄
                    </button>
                    <button type="button"
                            class="btn btn-primary"
                            data-bs-toggle="modal"
                            data-bs-target="#chatModal"
                            @@click="showChatHistory(cls.memberId)"
                            style="background-color: #F24B88; color: aliceblue;">
                        訊息
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
@*@@彥儀用@@*@
@*對話視窗開始*@
<div id="chat">
    <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="chatModalLabel">聯繫會員</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div v-for="msg in chatHistory"
                         :class="{'chat-message-sent': msg.role === role, 'chat-message-received': msg.role !== role}">
                       @* <div class="chat-avatar">
                            <!-- 如果msg.photo存在，則顯示照片 -->
                            <img v-if="photoURLs[msg.senderId]" :src="photoURLs[msg.senderId]">
                            <!-- 否則，顯示ID -->
                            <div v-else>{{ msg.senderId }}</div>
                        </div>*@
                        <!-- 只在接收者的訊息中顯示頭像 -->
                        <div class="chat-avatar" v-if="msg.role !== role">
                            <!-- 如果msg.photo存在，則顯示照片 -->
                            <img v-if="photoURLs[msg.senderId]" :src="photoURLs[msg.senderId]">
                            <!-- 否則，顯示ID -->
                            <div v-else>{{ msg.senderId }}</div>
                        </div>
                        <div class="chat-content">
                            {{ msg.messageContent }}
                            <div class="chat-time" :class="{'chat-time-right': Number(msg.senderId) === Number(senderId), 'chat-time-left': Number(msg.senderId) !== Number(senderId)}">
                                {{ msg.currentTime }}
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                        <input v-model="message" id="ChatInput" placeholder="輸入訊息" @@keyup.enter="sendMessage" />
                        <button @@click="sendMessage" class="btn btn-light" style="border-radius: 5px;padding:12px 14px"><i class="fa-solid fa-paper-plane"></i></button>
                </div>
                <div class="text-end demoButton">
                    <button type="button" id="demoButton" class="btn btn-outline-success m-2" style="border-radius: 5px;">DEMO1</button>
                    <button type="button" id="demoButton2" class="btn btn-outline-success m-2" style="border-radius: 5px;">DEMO2</button>
                </div>
            </div>
        </div>
    </div>
</div>
@*對話視窗結束*@


<script>


    //@@彥儀用@@
    //DEMO
    document.addEventListener("DOMContentLoaded", function () {
        var demoButton = document.getElementById("demoButton");
        if (demoButton) {
            demoButton.addEventListener("click", function () {
                var chatInput = document.getElementById("ChatInput");
                chatInput.value = "庭庭您好，收到您的預約了，下次上課記得攜帶水與毛巾";

                var event = new Event('input', { bubbles: true });
                chatInput.dispatchEvent(event);
            });
        }
        var demoButton2 = document.getElementById("demoButton2");
        if (demoButton2) {
            demoButton2.addEventListener("click", function () {
                var chatInput = document.getElementById("ChatInput");
                chatInput.value = "需穿著運動服，鞋子部分可以穿平底鞋，這樣使用重訓器材時才不會腳底不穩";

                var event = new Event('input', { bubbles: true });
                chatInput.dispatchEvent(event);
            });
        }
    });
    const sharedState = {
        Id: null,
        isVisible: false,
    };
    //@@彥儀用結束@@

    const TrainerIdFromSession = sessionStorage.getItem('trainerId');
    const { createApp, computed, ref } = Vue;
    const { createStore } = Vuex;

    const store = createStore({
        state() {
            return {
                classes: []
            };
        },
        mutations: {
            setClasses(state, classes) {
                state.classes = classes;
            }
        },
        actions: {
            fetchClasses({ commit }) {
                axios.get(`https://localhost:7011/api/TrainerClass/detail/${TrainerIdFromSession}`)
                    .then(response => {
                        commit('setClasses', response.data);
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });
            }
        },
        getters: {
            membersSummary: state => {
                let summary = {};
                state.classes.forEach(item => {
                    if (!summary[item.memberId]) {
                        summary[item.memberId] = {
                            memberId: item.memberId,
                            memberName: item.memberName,




                            totalClasses: 0,
                            totalCost: 0
                        };
                    }
                    summary[item.memberId].totalClasses++;
                    summary[item.memberId].totalCost += item.courseUnitPrice;
                });
                return Object.values(summary);
            }
        }
    });

    const app = createApp({
        setup() {
            const allClasses = computed(() => store.state.classes);
            const classes = computed(() => store.state.classes);
            const membersSummary = computed(() => store.getters.membersSummary);

            const getMemberSummary = (memberId) => {
                return membersSummary.value.find(member => member.memberId === memberId) || {};
            };
            const sortedClasses = computed(() => {
                return [...store.state.classes].sort((a, b) => {
                    // 若a的狀態是"進行中"，而b不是，則a應該在b之前
                    if (a.courseStatus === '進行中' && b.courseStatus !== '進行中') return -1;

                    // 若b的狀態是"進行中"，而a不是，則b應該在a之前
                    if (b.courseStatus === '進行中' && a.courseStatus !== '進行中') return 1;

                    // 否則，可以根據其他屬性（例如開始時間）進行排序
                    const dateA = new Date(a.startTime);
                    const dateB = new Date(b.startTime);
                    return dateA - dateB;
                });
            });


            const showClassRecords = (memberId) => {
                // 根據 memberId 獲取所有的課程資料
                const memberClasses = store.state.classes.filter(cls => cls.memberId === memberId);

                // 使用這些資料構建一個表格的HTML內容
                let tableContent = `
                        <table class="table table-bordered table-hover">
                            <thead style="background-color: #F24B88;">
                                <tr>
                                    <th>預約編號</th>
                                    <th>上課開始時間</th>
                                    <th>上課結束時間</th>
                                    <th>課程費用</th>
                                    <th>狀態</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;

                memberClasses.forEach(cls => {
                    tableContent += `
                            <tr>
                                <td>${cls.classId}</td>
                                    <td>${formatTo12Hour(cls.startTime)}</td>
                                     <td>${formatTo12Hour(cls.endTime)}</td>
                                <td>${cls.courseUnitPrice}</td>
                                <td>${cls.courseStatus}</td>
                            </tr>
                        `;
                });

                tableContent += `
                            </tbody>
                        </table>
                    `;
                // 添加會員的總堂數和總費用到彈出視窗
                const memberSummary = getMemberSummary(memberId);
                let summaryContent = `
                    <p>總堂數: ${memberSummary.totalClasses}</p>
                    <p>總費用: ${memberSummary.totalCost}</p>
                     `;

                Swal.fire({
                    title: '上課紀錄',
                    html: summaryContent + tableContent,  // 使用 html 屬性來顯示摘要和表格
                    width: '80%',  // 設定寬度
                    confirmButtonText: '關閉'
                });
            };
            function formatTo12Hour(timeString) {
                let date = new Date(timeString);
                let year = date.getFullYear();
                let month = date.getMonth() + 1;
                let day = date.getDate();
                let hours = date.getHours();
                let minutes = date.getMinutes();
                let ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12;
                hours = hours ? hours : 12;
                minutes = minutes < 10 ? '0' + minutes : minutes;
                return `${year}-${month}-${day} ${hours}:${minutes} ${ampm}`;
            }


            // 初始載入時獲取數據
            store.dispatch('fetchClasses');

            return {
                classes,
                membersSummary,
                getMemberSummary,
                showClassRecords, // 在這裡返回
                ...sharedState, //@@彥儀用@@

                sortedClasses,
                formatTo12Hour,   // 注意這裡返回函數
                showChatHistory(Id) { //@@彥儀用@@
                    this.Id = Id;
                    chat.showChatHistory(Id);
                }
            }


        }
    });



    app.use(store);
    app.mount('#app');
</script>

@*@@彥儀用@@*@
<script src="~/js/Chat.js"></script>